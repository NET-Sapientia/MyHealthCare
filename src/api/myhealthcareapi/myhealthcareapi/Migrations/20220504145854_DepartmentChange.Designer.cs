// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myhealthcareapi.DataAccesLayers;

namespace myhealthcareapi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220504145854_DepartmentChange")]
    partial class DepartmentChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.AppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MedicId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.DepartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.FeedBackEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<float>("Billing")
                        .HasColumnType("real");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.HospitalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.MedicDepartmentEntity", b =>
                {
                    b.Property<int>("MedicId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("MedicId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MedicDepartments");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.MedicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.AppointmentEntity", b =>
                {
                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.ClientEntity", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.DepartmentEntity", "Department")
                        .WithMany("Appointments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.MedicEntity", "Medic")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Department");

                    b.Navigation("Medic");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.DepartmentEntity", b =>
                {
                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.HospitalEntity", "Hospital")
                        .WithMany("Department")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.FeedBackEntity", b =>
                {
                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.AppointmentEntity", "Appointment")
                        .WithMany("FeedBacks")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.MedicDepartmentEntity", b =>
                {
                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.DepartmentEntity", "Department")
                        .WithMany("MedicDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("myhealthcareapi.DataAccesLayers.Models.MedicEntity", "Medic")
                        .WithMany("MedicDepartments")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Medic");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.AppointmentEntity", b =>
                {
                    b.Navigation("FeedBacks");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.ClientEntity", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.DepartmentEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicDepartments");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.HospitalEntity", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("myhealthcareapi.DataAccesLayers.Models.MedicEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
